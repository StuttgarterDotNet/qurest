//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QuRest.Infrastructure.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("QuRest.Infrastructure.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /**
        /// * @license
        /// *
        /// * Copyright (c) 2016, Petar Korponaić &lt;petar.korponaic@gmail.com&gt;
        /// *
        /// * This source code is licensed under the MIT License, found in
        /// * the LICENSE.txt file in the root directory of this source tree.
        /// */
        ///
        ///var antlr4 = require(&apos;antlr4/index&apos;);
        ///var QASMLexer = require(&apos;./QASMLexer&apos;);
        ///var QASMParser = require(&apos;./QASMParser&apos;);
        ///var QASMListener = require(&apos;./QASMListener&apos;).QASMListener;
        ///
        ///var ErrorListener = function(errors) {
        ///  antlr4.error.ErrorListener.call(this);
        ///  this.errors = errors;
        ///  r [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string QASMImport {
            get {
                return ResourceManager.GetString("QASMImport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Generated from QASM.g4 by ANTLR 4.7.1
        ///// jshint ignore: start
        ///var antlr4 = require(&apos;antlr4/index&apos;);
        ///
        ///
        ///var serializedATN = [&quot;\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964&quot;,
        ///    &quot;\u0002.\u012b\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004&quot;,
        ///    &quot;\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t&quot;,
        ///    &quot;\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004&quot;,
        ///    &quot;\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010&quot;,
        ///    &quot;\t\u0010\u0004\u00 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string QASMLexer {
            get {
                return ResourceManager.GetString("QASMLexer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Generated from QASM.g4 by ANTLR 4.7.1
        ///// jshint ignore: start
        ///var antlr4 = require(&apos;antlr4/index&apos;);
        ///
        ///// This class defines a complete listener for a parse tree produced by QASMParser.
        ///function QASMListener() {
        ///	antlr4.tree.ParseTreeListener.call(this);
        ///	return this;
        ///}
        ///
        ///QASMListener.prototype = Object.create(antlr4.tree.ParseTreeListener.prototype);
        ///QASMListener.prototype.constructor = QASMListener;
        ///
        ///// Enter a parse tree produced by QASMParser#mainprog.
        ///QASMListener.prototype.enterMainprog = function(ctx [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string QASMListener {
            get {
                return ResourceManager.GetString("QASMListener", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Generated from QASM.g4 by ANTLR 4.7.1
        ///// jshint ignore: start
        ///var antlr4 = require(&apos;antlr4/index&apos;);
        ///var QASMListener = require(&apos;./QASMListener&apos;).QASMListener;
        ///var grammarFileName = &quot;QASM.g4&quot;;
        ///
        ///var serializedATN = [&quot;\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964&quot;,
        ///    &quot;\u0003.\u0130\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t&quot;,
        ///    &quot;\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004&quot;,
        ///    &quot;\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004&quot;,
        ///    &quot;\ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string QASMParser {
            get {
                return ResourceManager.GetString("QASMParser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /**
        /// * @license
        /// *
        /// * Copyright (c) 2016, Petar Korponaić &lt;petar.korponaic@gmail.com&gt;
        /// *
        /// * This source code is licensed under the MIT License, found in
        /// * the LICENSE.txt file in the root directory of this source tree.
        /// */
        ///
        ///var math = require(&quot;mathjs&quot;);
        ///
        ///var QASMImport = require(&quot;./QASMImport.js&quot;);
        ///
        ///
        ///var formatComplex2 = function(re, im, options) {
        ///	options = options || {};
        ///
        ///	var sre = formatFloat(re, options);
        ///
        ///	var opt = JSON.parse(JSON.stringify(options));
        ///	opt.plusChar = &quot;+&quot;;
        ///	var sim = formatFloat(im, [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string quantum_circuit {
            get {
                return ResourceManager.GetString("quantum_circuit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var QuantumCircuit = require(&quot;./quantum-circuit&quot;);
        ///
        ///module.exports = {
        ///    qasm2svg: function (callback, qasmString) {
        ///        var circuit = new QuantumCircuit();
        ///        circuit.importQASM(qasmString, null);
        ///        var result = circuit.exportSVG(false);
        ///        callback(null, result);
        ///    },
        ///    
        ///    qasm2pyquil: function (callback, qasmString) {
        ///        var circuit = new QuantumCircuit();
        ///        circuit.importQASM(qasmString, null);
        ///        var result = circuit.exportPyquil(&quot;&quot;, false, null, [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string QuantumTranslation {
            get {
                return ResourceManager.GetString("QuantumTranslation", resourceCulture);
            }
        }
    }
}
